# ===============================
# 🍻 술하재밸 - 운영 환경 (Railway + Neon DB)
# ===============================

spring:
  # 자동 설정 제외 (메트릭스 관련)
  autoconfigure:
    exclude:
      - org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.metrics.export.simple.SimpleMetricsExportAutoConfiguration

  # PostgreSQL 데이터베이스 설정 (Neon DB)
  datasource:
    url: ${DATABASE_URL}  # Railway에서 자동 설정
    driver-class-name: org.postgresql.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
    
    # 커넥션 풀 최적화 (Railway 무료 플랜용 - 안정성 중심)
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:5}     # 약간 늘려서 안정성 확보
      minimum-idle: ${DB_MIN_IDLE:2}               # 최소 연결 수 증가
      idle-timeout: ${DB_IDLE_TIMEOUT:300000}      # 5분으로 복원
      max-lifetime: ${DB_MAX_LIFETIME:1800000}     # 30분으로 복원 (안정성)
      connection-timeout: ${DB_CONNECTION_TIMEOUT:20000}  # 20초
      leak-detection-threshold: ${DB_LEAK_DETECTION:60000}  # 60초로 리크 감지 활성화
      validation-timeout: ${DB_VALIDATION_TIMEOUT:5000}   # 5초
      initialization-fail-timeout: ${DB_INIT_FAIL_TIMEOUT:30000}  # 30초
      # 추가 안정성 설정
      auto-commit: true
      read-only: false
      pool-name: "BabyFashionCP"
      catalog: ${DB_CATALOG:}
      schema: ${DB_SCHEMA:}

  # H2 콘솔 비활성화 (보안)
  h2:
    console:
      enabled: false

  # JPA 설정 (운영용 - 메모리 최적화)
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}  # 환경변수로 제어 가능하도록 변경
      # 메모리 최적화 설정
      connection:
        provider_disables_autocommit: true
      cache:
        use_second_level_cache: false
        use_query_cache: false
      jdbc:
        batch_size: 20
        fetch_size: 50
        time_zone: UTC
    show-sql: false   # 성능상 SQL 로깅 비활성화
    properties:
      hibernate:
        format_sql: false
        dialect: org.hibernate.dialect.PostgreSQLDialect
        # 추가 최적화 설정
        jdbc.batch_size: 20
        order_inserts: true
        order_updates: true
        batch_versioned_data: true
        # 커넥션 릴리즈 설정
        connection.release_mode: after_transaction
        # 메타데이터 최적화
        temp.use_jdbc_metadata_defaults: false
    database: postgresql
    open-in-view: false  # OSIV 비활성화로 메모리 절약

  # CORS 설정 (운영 도메인)
  web:
    cors:
      allowed-origins: ${FRONTEND_URL}  # Vercel 배포 URL
      allowed-methods:
        - GET
        - POST
        - PUT
        - DELETE
        - OPTIONS
        - PATCH
      allowed-headers: "*"
      allow-credentials: true
    resources:
      add-mappings: false  # 정적 리소스 비활성화

  # OAuth2 설정 (운영)
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: ${BACKEND_URL}/login/oauth2/code/google
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: ${BACKEND_URL}/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - account_email
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: ${BACKEND_URL}/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # Jackson 직렬화 최적화
  jackson:
    default-property-inclusion: NON_NULL
    serialization:
      write-dates-as-timestamps: false

# 서버 최적화 설정 (Railway 무료 플랜 대응)
server:
  port: ${PORT:8080}  # Railway 자동 포트
  
  # Tomcat 커넥션 최적화 (Railway 무료 플랜용 - 더 제한적)
  tomcat:
    max-connections: ${SERVER_MAX_CONNECTIONS:30}    # 더 적은 연결
    accept-count: ${SERVER_ACCEPT_COUNT:5}           # 대기열 축소
    max-threads: ${SERVER_MAX_THREADS:10}            # 스레드 수 줄임
    min-spare-threads: ${SERVER_MIN_THREADS:2}
    connection-timeout: ${SERVER_CONNECTION_TIMEOUT:15000}
    
  # 추가 메모리 최적화
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 10MB
    
  # 응답 압축 (트래픽 절약)
  compression:
    enabled: true
    mime-types: text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json,application/xml
    min-response-size: 1024
    
  # 에러 페이지 비활성화 (보안)
  error:
    whitelabel:
      enabled: false
    include-stacktrace: never
    include-message: never

# JWT 설정 (운영용)
jwt:
  secret: ${JWT_SECRET}  # 강력한 시크릿 키 필수
  token-validity-in-seconds: ${JWT_TOKEN_VALIDITY:604800}  # 7일

# 앱 설정
app:
  name: 술하재밸
  version: ${APP_VERSION:1.0.0}
  environment: production
  oauth2:
    authorized-redirect-uri: ${AUTHORIZED_REDIRECT_URI}  # 프론트엔드 리다이렉트 URL

# 헬스체크 및 모니터링 (Railway 대응)
management:
  endpoints:
    web:
      exposure:
        include: health,info
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      cache:
        time-to-live: ${HEALTH_CACHE_TTL:5s}
    info:
      enabled: true
    metrics:
      enabled: false  # 컨테이너 환경에서 메트릭스 비활성화
  health:
    diskspace:
      threshold: ${HEALTH_DISK_THRESHOLD:100MB}
    db:
      enabled: true
  metrics:
    enable:
      system: false  # 시스템 메트릭스 비활성화
      process: false  # 프로세스 메트릭스 비활성화

# 로깅 설정 (운영용 - 최소 로깅)
logging:
  level:
    root: WARN
    com.drink.balancegame: INFO
    org.springframework.web: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN

# 보안 설정
security:
  require-ssl: ${REQUIRE_SSL:false}  # Railway는 자동 HTTPS 제공