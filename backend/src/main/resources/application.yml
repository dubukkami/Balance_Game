# ===============================
# üçª Ïà†ÌïòÏû¨Î∞∏ - Í∏∞Î≥∏ ÏÑ§Ï†ï
# ===============================
spring:
  # ÌîÑÎ°úÌååÏùº ÏÑ§Ï†ï
  profiles:
    default: local
    
  # Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í∏∞Î≥∏ ÏÑ§Ï†ï (H2)
  datasource:
    url: ${DATABASE_URL:jdbc:h2:mem:testdb}
    driver-class-name: ${DB_DRIVER:org.h2.Driver}
    username: ${DB_USERNAME:sa}
    password: ${DB_PASSWORD:}
    hikari:
      minimum-idle: ${HIKARI_MIN_IDLE:5}
      maximum-pool-size: ${HIKARI_MAX_POOL_SIZE:10}
      idle-timeout: ${HIKARI_IDLE_TIMEOUT:300000}
      pool-name: HikariCP-Pool
      max-lifetime: ${HIKARI_MAX_LIFETIME:1800000}
      connection-timeout: ${HIKARI_CONNECTION_TIMEOUT:30000}
      leak-detection-threshold: 0  # ÏãúÍ≥Ñ ÎèôÍ∏∞Ìôî Î¨∏Ï†úÎ°ú ÎπÑÌôúÏÑ±Ìôî

  # H2 ÏΩòÏÜî ÏÑ§Ï†ï
  h2:
    console:
      enabled: ${H2_CONSOLE_ENABLED:true}
      path: /h2-console

  # JPA Í∏∞Î≥∏ ÏÑ§Ï†ï
  jpa:
    hibernate:
      ddl-auto: ${DDL_AUTO:update}
    show-sql: ${SHOW_SQL:true}
    properties:
      hibernate:
        format_sql: ${FORMAT_SQL:true}
        dialect: ${HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}
    database: ${DATABASE_TYPE:h2}

  # CORS ÏÑ§Ï†ï
  web:
    cors:
      allowed-origins: ${CORS_ORIGINS:http://localhost:3000,http://localhost:5173}
      allowed-methods: ${CORS_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
      allowed-headers: ${CORS_HEADERS:*}
      allow-credentials: ${CORS_CREDENTIALS:true}

  # OAuth2 ÏÑ§Ï†ï
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            redirect-uri: ${BACKEND_URL:http://localhost:8080}/login/oauth2/code/google
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            redirect-uri: ${BACKEND_URL:http://localhost:8080}/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - profile_nickname
              - account_email
              - profile_image
            client-name: Kakao
          naver:
            client-id: ${NAVER_CLIENT_ID:your-naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:your-naver-client-secret} 
            redirect-uri: ${BACKEND_URL:http://localhost:8080}/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

# ÏÑúÎ≤Ñ ÏÑ§Ï†ï
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${SERVER_CONTEXT_PATH:}

# JWT ÏÑ§Ï†ï
jwt:
  secret: ${JWT_SECRET:balancegame-secret-key-for-jwt-token-generation-and-validation-should-be-at-least-256-bits}
  token-validity-in-seconds: ${JWT_TOKEN_VALIDITY:86400} # 24ÏãúÍ∞Ñ

# Ïï± ÏÑ§Ï†ï
app:
  name: ${APP_NAME:Ïà†ÌïòÏû¨Î∞∏}
  version: ${APP_VERSION:1.0.0}
  oauth2:
    authorized-redirect-uri: ${AUTHORIZED_REDIRECT_URI:http://localhost:3000/oauth2/redirect}

# Î°úÍπÖ ÏÑ§Ï†ï
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.drink.balancegame: ${LOG_LEVEL_APP:DEBUG}
    org.springframework.web: ${LOG_LEVEL_WEB:DEBUG}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:DEBUG}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:TRACE}

